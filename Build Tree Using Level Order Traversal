#include <iostream>
#include <queue>
using namespace std;

class Node{
    public:

    int data;
    Node* left;
    Node* right;

    Node(int _data):data(_data),left(NULL),right(NULL){}

};


Node* buildTree_Using_Recursion(){
  int data;
  cin>> data;
  if(data == -1){
    return NULL;
  }

  Node* root = new Node(data);
  root->left = buildTree_Using_Recursion();
  root->right = buildTree_Using_Recursion();
  return root;
}

Node* buildTree_Using_LevelOrderTraversal(){
  int data;
  cin>>data;

  if(data == -1){
    return NULL;
  }

  Node* root = new Node(data);
  queue<Node*> q;
  q.push(root);

  while(!q.empty()){
    Node* curr = q.front();
    q.pop();

    int leftdata;
    cin>>leftdata;

    if(leftdata != -1){
      curr->left = new Node(leftdata);
      q.push(curr->left);
    }

    int rightdata;
    cin>>rightdata;

    if(rightdata != -1){
      curr->right = new Node(rightdata);
      q.push(curr->right);
    }
  }

  return root;
}


void LevelOrderTraversal_PrintLevelWise(Node* root){
  queue<Node*> q;

  q.push(root);
  q.push(NULL);

  while(!q.empty()){

    Node* temp = q.front();
    q.pop();
    if(temp == NULL){
      cout<<endl;
      if(!q.empty()){
        q.push(NULL);
      }
    }
    else{
      cout<<temp->data<<" ";
      if(temp->left){
        q.push(temp->left);
      }
      if(temp->right){
        q.push(temp->right);
      }
    } 
  }
}

int main() {
  Node* root = NULL;
  root = buildTree_Using_Recursion();


  cout<<"Printing Level Order Traversal Levelwise: "<<endl;
  LevelOrderTraversal_PrintLevelWise(root);
  cout<<endl;

 


  return 0;
}
