#include <iostream>
#include <queue>
#include <map>
using namespace std;

class Node{
    public:
    int data;
    Node* left;
    Node* right;

    Node(int _data):data(_data),left(NULL),right(NULL){}
};


void printBottomView(Node* root){
  if(!root) return;

  map<int,int> topNode;

  queue<pair<Node*,int>> q;

  q.push({root,0});

  while(!q.empty()){
    auto temp = q.front();
    q.pop();
    Node* frontNode = temp.first;
    int hd = temp.second;

    topNode[hd] = frontNode->data;

    if(frontNode->left){
      q.push({frontNode->left,hd-1});
    }
    if(frontNode->right){
      q.push({frontNode->right,hd+1});
    } 
  }


  cout<<"Printing Bottom View :"<<endl;
  for(auto it:topNode){
    cout<<it.second<<" ";
  }
  cout<<endl;
}


Node* buildTree(){
  int data;
  cin>>data;

  if(data == -1){
    return NULL;
  }

  Node* root = new Node(data);
  root->left = buildTree();
  root->right = buildTree();
  return root;
}
int main() {
  Node* root = buildTree();

  printBottomView(root);
  cout<<endl;

  return 0;
}
