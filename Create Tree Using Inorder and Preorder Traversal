#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
using namespace std;



class Node{
    public:
    int data;
    Node* left;
    Node* right;

    Node(int _data):data(_data),left(NULL),right(NULL){}
};

void LevelOrderTraversal_PrintLevelWise(Node* root){
  queue<Node*> q;

  q.push(root);
  q.push(NULL);

  while(!q.empty()){

    Node* temp = q.front();
    q.pop();
    if(temp == NULL){
      cout<<endl;
      if(!q.empty()){
        q.push(NULL);
      }
    }
    else{
      cout<<temp->data<<" ";
      if(temp->left){
        q.push(temp->left);
      }
      if(temp->right){
        q.push(temp->right);
      }
    } 
  }
}

int findPos(vector<int> &inorder,int n,int element){
  for(int i=0;i<n;i++){
    if(element == inorder[i]){
      return i;
    }
  }
  return -1;
}

Node* buildtreeUsingInorderPreorder(vector<int> &inorder,vector<int> &preorder,int &size,int &preIndex,int inStart,int inEnd){
    if(preIndex >= size || inStart > inEnd) return NULL;

    // step A:create root
    int element = preorder[preIndex++];
    Node* root = new Node(element);

    int pos = findPos(inorder,size,element);
    // step B:left call
    root->left = buildtreeUsingInorderPreorder(inorder,preorder,size,preIndex,inStart,pos-1);
    // step C:right call
    root->right = buildtreeUsingInorderPreorder(inorder,preorder,size,preIndex,pos+1,inEnd);

    return root;
}

Node* buildtreeUsingInorderPreorder_withMap(vector<int> &inorder,vector<int> &preorder,int &size,int &preIndex,int inStart,int inEnd,unordered_map<int,int>& posMap){
    if(preIndex >= size || inStart > inEnd) return NULL;

    // step A:create root
    int element = preorder[preIndex++];
    Node* root = new Node(element);

    int pos = posMap[element];
    // step B:left call
    root->left = buildtreeUsingInorderPreorder_withMap(inorder,preorder,size,preIndex,inStart,pos-1,posMap);
    // step C:right call
    root->right = buildtreeUsingInorderPreorder_withMap(inorder,preorder,size,preIndex,pos+1,inEnd,posMap);

    return root;
}
int main() {
  vector<int> inorder = {40,20,50,10,60,30,70};
  vector<int> preorder = {10,20,40,50,30,60,70};

  int size = preorder.size();
  int inStart = 0;
  int inEnd = size-1;

  int preIndex1 = 0;
  Node* root = buildtreeUsingInorderPreorder(inorder,preorder,size,preIndex1,inStart,inEnd);


  unordered_map<int,int> posMap;
  for(int i=0;i<size;i++){
    posMap[inorder[i]] = i;
  }
  int preIndex2 = 0;
  Node* root1 = buildtreeUsingInorderPreorder_withMap(inorder,preorder,size,preIndex2,inStart,inEnd,posMap);

  // Brute force
  cout<<"Printing tree created from Inorder & Preorder Traversal :"<<endl;
  LevelOrderTraversal_PrintLevelWise(root);
  cout<<endl;

  
  // optimized approach using map
  cout<<"Printing tree created from Inorder & Preorder Traversal using map :"<<endl;
  LevelOrderTraversal_PrintLevelWise(root1);
  cout<<endl;



  return 0;
}




