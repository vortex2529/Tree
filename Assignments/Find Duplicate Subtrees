class Solution {
public:
    vector<TreeNode*> ans;
    unordered_map<string,int> subtreeMap;

    string preorder(TreeNode* root){
        if(!root) return "N";

        string left = preorder(root->left);
        string right = preorder(root->right);
        string curr = to_string(root->val);

        string s = curr +","+ left+"," + right;
        if(subtreeMap.find(s) != subtreeMap.end()){
            if(subtreeMap[s] == 1) ans.push_back(root);
            subtreeMap[s]++;
        }
        else{
            subtreeMap[s] = 1;
        }
        return s;
    }
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        preorder(root);
        return ans;
    }
};
